What is shady DOM?

Why do we need a new kind of DOM?

Encapsulation is at the core of web components.

Web components aim to provide the user a simple element interface that is rendered with complexity hidden under the hood.

Browsers often do this kind of encapsulation internally. Elements like <select> or <video> are rendered as unreachable DOM subtrees, only the browser vendors really know what’s in there.

JQuery plugins allow you to target an element and imbue it with abilities. Often a plugin will generate a bunch of DOM for you; However, these plugin elements are not quite as nifty as <select> or <video> because the DOM used to render the control ends up just sitting there in your document, not hidden away.

The shadow DOM standard is aimed at bridging this gap. On browsers that support shadow DOM, it’s possible to have an element that is rendered with complex DOM, but have that complexity hidden away as implementation detail. Simple Markup is Good

After the makeFade call, let’s say the DOM looks something like this:

<x-fade>
  <div>
    <img src="cool.png">
  </div>
  <canvas></canvas>
</x-fade>

x-fade needs to add some DOM elements to implement its behavior. Sadly, these elements are now exposed to the world. Exposing these nodes is problematic:

	+ Queries over the document now include the <canvas> and the <div>.
	+ The new nodes may be affected by stylesheets, because the document author wasn’t expecting them.
	+ The <img> node may lose styling, because it’s in a different part of the DOM tree now


*** Tree Scoping ***
Tree-scoping is the ability to take a DOM subtree and hide it from the main document scope.

If x-fade is implemented with shadow DOM, then after calling makeFade, the DOM tree looks like this:

<x-fade>
  <img src="cool.png">
</x-fade>

*** Shadow DOM Encapsulation ***

If we draw a picture of the DOM that includes the shadow root, we can see where the extra goodies are:

<x-fade>
  <img src="cool.png">
  #shadow-root
    <div>
      <content select="img">
    </div>
    <canvas></canvas>
</x-fade>

OK, there’s our <canvas> and our <div> (and one other new thing: the <content> node, this is the bit that tells the browser where and how to combine the element’s shadow tree with its regular children).

At render time, the element’s children and shadow tree are composed into a single tree for rendering. In this case, the composed tree looks just like the classic jQuery version shown before:

<x-fade>
  <div>
    <img src="cool.png">
  </div>
  <canvas></canvas>
</x-fade>

*** Shadow DOM is awesome, why is there a shady DOM? ***


